{"/home/travis/build/npmtest/node-npmtest-ntwitter/test.js":"/* istanbul instrument in package npmtest_ntwitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ntwitter/lib.npmtest_ntwitter.js":"/* istanbul instrument in package npmtest_ntwitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ntwitter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ntwitter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ntwitter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ntwitter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ntwitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ntwitter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ntwitter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ntwitter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ntwitter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ntwitter.__dirname + '/lib.npmtest_ntwitter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ntwitter/node_modules/ntwitter/lib/twitter.js":"var VERSION = '0.2.8',\n  http = require('http'),\n  querystring = require('querystring'),\n  oauth = require('oauth'),\n  Cookies = require('cookies'),\n  Keygrip = require('keygrip'),\n  streamparser = require('./parser'),\n\tutil = require('util'),\n\tutils = require('./utils');\n\tkeys = require('./keys');\n\nfunction Twitter(options) {\n  if (!(this instanceof Twitter)) return new Twitter(options);\n\n  var defaults = {\n    consumer_key: null,\n    consumer_secret: null,\n    access_token_key: null,\n    access_token_secret: null,\n\n    headers: {\n      'Accept': '*/*',\n      'Connection': 'close',\n      'User-Agent': 'ntwitter/' + VERSION\n    },\n\n\n    secure: false, // force use of https for login/gatekeeper\n    cookie: 'twauth',\n    cookie_options: {},\n    cookie_secret: null\n  };\n  this.options = utils.merge(defaults, options, keys.urls);\n\n  this.oauth = new oauth.OAuth(\n    this.options.request_token_url,\n    this.options.access_token_url,\n    this.options.consumer_key,\n    this.options.consumer_secret,\n    '1.0', null, 'HMAC-SHA1', null,\n    this.options.headers);\n}\nTwitter.VERSION = VERSION;\nmodule.exports = Twitter;\n\n/*\n * GET\n */\nTwitter.prototype.get = function(url, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  if ( typeof callback !== 'function' ) {\n    throw new Error('FAIL: INVALID CALLBACK.');\n    return this;\n  }\n\n  if (url.charAt(0) == '/')\n    url = this.options.rest_base + url;\n\n  this.oauth.get(url + '?' + querystring.stringify(params),\n    this.options.access_token_key,\n    this.options.access_token_secret,\n  function(error, data, response) {\n    if ( error && error.statusCode ) {\n      var err = new Error('HTTP Error '\n        + error.statusCode + ': '\n        + http.STATUS_CODES[error.statusCode]);\n      err.statusCode = error.statusCode;\n      err.data = error.data;\n      callback(err);\n    } \n    else if (error) {\n      callback(error);\n    }\n    else {\n      try {\n        var json = JSON.parse(data);\n      } \n      catch(err) {\n        return callback(err);\n      }\n      callback(null, json);\n    }\n  });\n  return this;\n}\n\n\n/*\n * POST\n */\nTwitter.prototype.post = function(url, content, content_type, callback) {\n  if (typeof content === 'function') {\n    callback = content;\n    content = null;\n    content_type = null;\n  } else if (typeof content_type === 'function') {\n    callback = content_type;\n    content_type = null;\n  }\n\n  if ( typeof callback !== 'function' ) {\n    throw new Error('FAIL: INVALID CALLBACK.');\n    return this;\n  }\n\n  if (url.charAt(0) == '/')\n    url = this.options.rest_base + url;\n\n  // Workaround: oauth + booleans == broken signatures\n  if (content && typeof content === 'object') {\n    Object.keys(content).forEach(function(e) {\n\t\t\tif ( typeof content[e] === 'boolean' )\n\t\t\t\tcontent[e] = content[e].toString();\n\t\t});\n  }\n  \n  this.oauth.post(url,\n    this.options.access_token_key,\n    this.options.access_token_secret,\n    content, content_type,\n  function(error, data, response) {\n    if ( error && error.statusCode ) {\n      var err = new Error('HTTP Error '\n        + error.statusCode + ': '\n        + http.STATUS_CODES[error.statusCode]\n        + ', API message: ' + error.data);\n      err.data = error.data;\n      err.statusCode = error.statusCode;\n      callback(err);\n    } \n    else if (error) {\n      callback(error);\n    }\n    else {\n      try {\n        var json = JSON.parse(data);\n      } \n      catch(err) {\n        return callback(err);\n      }\n      callback(null, json);\n    }\n  });\n  return this;\n}\n\n\n/*\n * SEARCH (not API stable!)\n */\nTwitter.prototype.search = function(q, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  if ( typeof callback !== 'function' ) {\n    throw new Error('FAIL: INVALID CALLBACK.');\n    return this;\n  }\n\n  var url = this.options.search_base + '/search.json';\n  params = utils.merge(params, {q:q});\n  this.get(url, params, callback);\n  return this;\n}\n\n\n/*\n * STREAM\n */\nTwitter.prototype.stream = function(method, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  // Iterate on params properties, if any property is an array, convert it to comma-delimited string\n  if (params) {\n\t\tObject.keys(params).forEach(function(item) {\n\t\t\tif (util.isArray(params[item])) {\n\t\t\t\tparams[item] = params[item].join(',');\n\t\t\t}\n\t\t});\n  }\n\n  var stream_base = this.options.stream_base,\n      self = this;\n\n  // Stream type customisations\n  if (method === 'user') {\n    stream_base = this.options.user_stream_base;\n  } \n  else if (method === 'site') {\n    stream_base = this.options.site_stream_base;\n  } \n\n\n  var url = stream_base + '/' + escape(method) + '.json';\n\n  var request = this.oauth.post(\n    url,\n    this.options.access_token_key,\n    this.options.access_token_secret,\n    params, null\n  );\n\n  var stream = new streamparser();\n\n  stream.destroySilent = function() {\n    if ( typeof request.abort === 'function' )\n      request.abort(); // node v0.4.0\n    else\n      request.socket.destroy();\n  };\n  stream.destroy = function() {\n    // FIXME: should we emit end/close on explicit destroy?\n    stream.destroySilent();\n\n    // emit the 'destroy' event\n    stream.emit('destroy','socket has been destroyed');\n  };\n\n  \n  stream.on('_data', processTweet);\n\n  function processTweet(tweet) {\n    if (tweet['limit']) {\n      stream.emit('limit', tweet['limit']);\n    }\n    else if (tweet['delete']) {\n      stream.emit('delete', tweet['delete']);\n    }\n    else if (tweet['scrub_geo']) {\n      stream.emit('scrub_geo', tweet['scrub_geo']);\n    }\n    else {\n      stream.emit('data', tweet);\n    }\n  }\n\n  request.on('response', function(response) {\n\n    // Any response code greater then 200 from steam API is an error\n    if(response.statusCode > 200) {\n      stream.destroySilent();\n      stream.emit('error', 'http', response.statusCode );\n    }\n    else\n    {\n      // FIXME: Somehow provide chunks of the response when the stream is connected\n      // Pass HTTP response data to the parser, which raises events on the stream\n      response.on('data', function(chunk) {\n        stream.receive(chunk);\n      });\n      response.on('error', function(error) {\n        stream.emit('error', error);\n      });\n      response.on('end', function() {\n        stream.emit('end', response);\n      });\n      \n      /* \n       * This is a net.Socket event.\n       * When twitter closes the connectionm no 'end/error' event is fired.\n       * In this way we can able to catch this event and force to destroy the \n       * socket. So, 'stream' object will fire the 'destroy' event as we can see above.\n       */\n      response.on('close', function() {\n        stream.destroy();\n      });\n    }\n  });\n  request.on('error', function(error) {\n    stream.emit('error', error);\n  });\n  request.end();\n\n  if ( typeof callback === 'function' ) callback(stream);\n  return this;\n}\n\n/*\n * TWITTER 'O'AUTHENTICATION UTILITIES, INCLUDING THE GREAT\n * CONNECT/STACK STYLE TWITTER 'O'AUTHENTICATION MIDDLEWARE\n * and helpful utilities to retrieve the twauth cookie etc.\n */\nTwitter.prototype.cookie = function(req) {\n  var keys = null;\n\n\t//this make no sense !this.options.cookie_secret return always true or false\n  //if ( !this.options.cookie_secret !== null )\n\tif(this.options.cookie_secret)\n    keys = new Keygrip(this.options.cookie_secret);\n  var cookies = new Cookies( req, null, keys )\n  var getState = this.options.getState || function (req, key) {\n    return cookies.get(key);\n  };\n\n  // Fetch the cookie\n  try {\n    var twauth = JSON.parse(getState(req, this.options.cookie));\n  } catch (error) {\n    var twauth = null;\n  }\n  return twauth;\n}\n\nTwitter.prototype.login = function(mount, success) {\n  var self = this,\n    url = require('url');\n\n  // Save the mount point for use in gatekeeper\n  this.options.login_mount = mount = mount || '/twauth';\n\n  // Use secure cookie if forced to https and haven't configured otherwise\n  if ( this.options.secure && !this.options.cookie_options.secure )\n    this.options.cookie_options.secure = true;\n  // Set up the cookie encryption secret if we've been given one\n  var keys = null;\n\t//the same issue than above\n  //if ( !this.options.cookie_secret !== null )\n\tif(this.options.cookie_secret)\n    keys = new Keygrip(this.options.cookie_secret);\n  // FIXME: ^ so configs that don't use login() won't work?\n\n  return function handle(req, res, next) {\n    // state\n    var cookies = new Cookies( req, res, keys )\n    var setState = self.options.setState || function (res, key, value) {\n      cookies.set(key, value, self.options.cookie_options);\n    };\n    var clearState = self.options.clearState || function (res, key) {\n      cookies.set(key);\n    };\n\n    var path = url.parse(req.url, true);\n\n    // We only care about requests against the exact mount point\n    if ( path.pathname !== mount ) return next();\n\n    // Set the oauth_callback based on this request if we don't have it\n    if ( !self.oauth._authorize_callback ) {\n      // have to get the entire url because this is an external callback\n      // but it's only done once...\n      var scheme = (req.socket.secure || self.options.secure) ? 'https://' : 'http://',\n        path = url.parse(scheme + req.headers.host + req.url, true);\n      self.oauth._authorize_callback = path.href;\n    }\n\n    // Fetch the cookie\n    var twauth = self.cookie(req);\n\n    // We have a winner, but they're in the wrong place\n    if ( twauth && twauth.user_id && twauth.access_token_secret ) {\n      res.writeHead(302, {'Location': success || '/'});\n      res.end();\n      return;\n\n    // Returning from Twitter with oauth_token\n    } else if ( path.query && path.query.oauth_token && path.query.oauth_verifier && twauth && twauth.oauth_token_secret ) {\n      self.oauth.getOAuthAccessToken(\n        path.query.oauth_token,\n        twauth.oauth_token_secret,\n        path.query.oauth_verifier,\n      function(error, access_token_key, access_token_secret, params) {\n        // FIXME: if we didn't get these, explode\n        var user_id = (params && params.user_id) || null,\n          screen_name = (params && params.screen_name) || null;\n\n        if ( error ) {\n          // FIXME: do something more intelligent\n          return next(500);\n        } else {\n          setState(res, self.options.cookie, JSON.stringify({\n            user_id: user_id,\n            screen_name: screen_name,\n            access_token_key: access_token_key,\n            access_token_secret: access_token_secret\n          }));\n          res.writeHead(302, {'Location': success || '/'});\n          res.end();\n          return;\n        }\n      });\n\n    // Begin OAuth transaction if we have no cookie or access_token_secret\n    } else if ( !(twauth && twauth.access_token_secret) ) {\n      self.oauth.getOAuthRequestToken(\n      function(error, oauth_token, oauth_token_secret, oauth_authorize_url, params) {\n        if ( error ) {\n          // FIXME: do something more intelligent\n          return next(500);\n        } else {\n          setState(res, self.options.cookie, JSON.stringify({\n            oauth_token: oauth_token,\n            oauth_token_secret: oauth_token_secret\n          }));\n          res.writeHead(302, {\n            'Location': self.options.authorize_url + '?'\n              + querystring.stringify({oauth_token: oauth_token})\n          });\n          res.end();\n          return;\n        }\n      });\n\n    // Broken cookie, clear it and return to originating page\n    // FIXME: this is dumb\n    } else {\n      clearState(res, self.options.cookie);\n      res.writeHead(302, {'Location': mount});\n      res.end();\n      return;\n    }\n  };\n}\n\nTwitter.prototype.gatekeeper = function(failure) {\n  var self = this,\n    mount = this.options.login_mount || '/twauth';\n\n  return function(req, res, next) {\n    var twauth = self.cookie(req);\n\n    // We have a winner\n    if ( twauth && twauth.user_id && twauth.access_token_secret )\n      return next();\n\n    // I pity the fool!\n    // FIXME: use 'failure' param to fail with: a) 401, b) redirect\n    //        possibly using configured login mount point\n    //        perhaps login can save the mount point, then we can use it?\n    res.writeHead(401, {}); // {} for bug in stack\n    res.end([\n      '<html><head>',\n      '<meta http-equiv=\"refresh\" content=\"1;url=\" + mount + \"\">',\n      '</head><body>',\n      '<h1>Twitter authentication required.</h1>',\n      '</body></html>'\n    ].join(''));\n  };\n}\n\n\n/*\n * CONVENIENCE FUNCTIONS (not API stable!)\n */\n\n// Timeline resources\n\nTwitter.prototype.getPublicTimeline = function(params, callback) {\n  var url = '/statuses/public_timeline.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getHomeTimeline = function(params, callback) {\n  var url = '/statuses/home_timeline.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getFriendsTimeline = function(params, callback) {\n  var url = '/statuses/friends_timeline.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getUserTimeline = function(params, callback) {\n  var url = '/statuses/user_timeline.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getMentions = function(params, callback) {\n  var url = '/statuses/mentions.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedByMe = function(params, callback) {\n  var url = '/statuses/retweeted_by_me.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedToMe = function(params, callback) {\n  var url = '/statuses/retweeted_to_me.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetsOfMe = function(params, callback) {\n  var url = '/statuses/retweets_of_me.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedToUser = function(params, callback){\n  var url = '/statuses/retweeted_to_user.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedByUser = function(params, callback){\n  var url = '/statuses/retweeted_by_user.json';\n  this.get(url, params, callback);\n  return this;\n}\n\n// Tweets resources\n\nTwitter.prototype.showStatus = function(id, callback) {\n  var url = '/statuses/show/' + escape(id) + '.json';\n  this.get(url, null, callback);\n  return this;\n}\nTwitter.prototype.getStatus\n  = Twitter.prototype.showStatus;\n\nTwitter.prototype.updateStatus = function(text, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var url = '/statuses/update.json';\n  var defaults = {\n    status: text,\n    include_entities: 1\n  };\n  params = utils.merge(defaults, params);\n  this.post(url, params, null, callback);\n  return this;\n}\n\nTwitter.prototype.destroyStatus = function(id, callback) {\n  var url = '/statuses/destroy/' + escape(id) + '.json';\n  this.post(url, null, null, callback);\n  return this;\n}\nTwitter.prototype.deleteStatus\n  = Twitter.prototype.destroyStatus;\n\nTwitter.prototype.retweetStatus = function(id, callback) {\n  var url = '/statuses/retweet/' + escape(id) + '.json';\n  this.post(url, null, null, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweets = function(id, params, callback) {\n  var url = '/statuses/retweets/' + escape(id) + '.json';\n  this.get(url, params,  callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedBy = function(id, params, callback) {\n  var url = '/statuses/' + escape(id) + '/retweeted_by.json';\n  this.post(url, params, null, callback);\n  return this;\n}\n\nTwitter.prototype.getRetweetedByIds = function(id, params, callback) {\n  var url = '/statuses/' + escape(id) + '/retweeted_by/ids.json';\n  this.post(url, params, null, callback);\n  return this;\n}\n\n\n// User resources\nTwitter.prototype.showUser = function(id, callback) {\n  // Lookup will take a single id as well as multiple; why not just use it?\n  var url = '/users/lookup.json',\n      params = {}, ids = [], names = [];\n\n  if(typeof id === 'string') {\n    id = id.replace(/^\\s+|\\s+$/g, '');\n    id = id.split(',');\n  }\n\n  // Wrap any stand-alone item in an array.\n  id = [].concat(id);\n\n  // Add numbers as userIds, strings as usernames.\n  id.forEach(function(item) {\n    if (+item)\n      ids.push(item);\n    else\n      names.push(item);\n  });\n\n  params.user_id = ids.toString();\n  params.screen_name = names.toString();\n\n  this.get(url, params, callback);\n  return this;\n};\nTwitter.prototype.lookupUser\n  = Twitter.prototype.lookupUsers\n  = Twitter.prototype.showUser;\n\nTwitter.prototype.searchUser = function(q, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var url = '/users/search.json';\n  params = utils.merge(params, {q:q});\n  this.get(url, params, callback);\n  return this;\n}\nTwitter.prototype.searchUsers\n  = Twitter.prototype.searchUser;\n\n// FIXME: users/suggestions**\n\nTwitter.prototype.userProfileImage = function(id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  } else if (typeof params === 'string') {\n    params = { size: params };\n  }\n\n  var url = '/users/profile_image/' + escape(id) + '.json?' + querystring.stringify(params);\n\n  // Do our own request, so we can return the 302 location header\n  var request = this.oauth.get(this.options.rest_base + url,\n    this.options.access_token_key,\n    this.options.access_token_secret);\n  request.on('response', function(response) {\n    // return the location or an HTTP error\n    if (!response.headers.location) { \n      callback(new Error('HTTP Error '\n      + response.statusCode + ': '\n      + http.STATUS_CODES[response.statusCode])) }\n    callback(null, response.headers.location);\n  });\n  request.end();\n\n  return this;\n}\n\n// FIXME: statuses/friends, statuses/followers\n\n// Trends resources\n\nTwitter.prototype.getTrends = function(callback) {\n  this.getTrendsWithId('1', null, callback);\n  return this;\n}\n\nTwitter.prototype.getCurrentTrends = function(params, callback) {\n  this.getTrendsWithId('1', params, callback);\n  return this;\n}\n\nTwitter.prototype.getTrendsWithId = function(woeid, params, callback) {\n  if (!woeid) woeid = '1';\n  var url = '/trends/' + woeid + '.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getDailyTrends = function(params, callback) {\n  var url = '/trends/daily.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getWeeklyTrends = function(params, callback) {\n  var url = '/trends/weekly.json';\n  this.get(url, params, callback);\n  return this;\n}\n\n// Local Trends resources\n\n// List resources\n\nTwitter.prototype.getLists = function(id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var defaults = {key:'lists'};\n  if (typeof id === 'string')\n    defaults.screen_name = id;\n  else\n    defaults.user_id = id;\n  params = utils.merge(defaults, params);\n\n  var url = '/lists.json';\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getListMemberships = function(id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var defaults = {key:'lists'};\n  if (typeof id === 'string')\n    defaults.screen_name = id;\n  else\n    defaults.user_id = id;\n  params = utils.merge(defaults, params);\n\n  var url = '/lists/memberships.json';\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getListSubscriptions = function(id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var defaults = {key:'lists'};\n  if (typeof id === 'string')\n    defaults.screen_name = id;\n  else\n    defaults.user_id = id;\n  params = utils.merge(defaults, params);\n\n  var url = '/lists/subscriptions.json';\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.showList = function(screen_name, list_id, callback) {\n  var url = '/' + escape(screen_name) + '/lists/' + escape(list_id) + '.json';\n  this.get(url, null, callback);\n  return this;\n}\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.getListTimeline = function(screen_name, list_id, params, callback) {\n  var url = '/' + escape(screen_name) + '/lists/' + escape(list_id) + '/statuses.json';\n  this.get(url, params, callback);\n  return this;\n}\nTwitter.prototype.showListStatuses\n  = Twitter.prototype.getListTimeline;\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.createList = function(screen_name, list_name, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var url = '/' + escape(screen_name) + '/lists.json';\n  params = utils.merge(params, {name:list_name});\n  this.post(url, params, null, callback);\n  return this;\n}\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.updateList = function(screen_name, list_id, params, callback) {\n  var url = '/' + escape(screen_name) + '/lists/' + escape(list_id) + '.json';\n  this.post(url, params, null, callback);\n  return this;\n}\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.deleteList = function(screen_name, list_id, callback) {\n  var url = '/' + escape(screen_name) + '/lists/' + escape(list_id) + '.json?_method=DELETE';\n  this.post(url, null, callback);\n  return this;\n}\nTwitter.prototype.destroyList\n  = Twitter.prototype.deleteList;\n\n// List Members resources\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.getListMembers = function(screen_name, list_id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var url = '/' + escape(screen_name) + '/' + escape(list_id) + '/members.json';\n  params = utils.merge(params, {key:'users'});\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\n// FIXME: the rest of list members\n\n// List Subscribers resources\n\n// FIXME: Uses deprecated Twitter lists API\nTwitter.prototype.getListSubscribers = function(screen_name, list_id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var url = '/' + escape(screen_name) + '/' + escape(list_id) + '/subscribers.json';\n  params = utils.merge(params, {key:'users'});\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\n// FIXME: the rest of list subscribers\n\n// Direct Messages resources\n\nTwitter.prototype.getDirectMessages = function(params, callback) {\n  var url = '/direct_messages.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getDirectMessagesSent = function(params, callback) {\n  var url = '/direct_messages/sent.json';\n  this.get(url, params, callback);\n  return this;\n}\nTwitter.prototype.getSentDirectMessages\n  = Twitter.prototype.getDirectMessagesSent;\n\nTwitter.prototype.newDirectMessage = function(id, text, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var defaults = {\n    text: text,\n    include_entities: 1\n  };\n  if (typeof id === 'string')\n    defaults.screen_name = id;\n  else\n    defaults.user_id = id;\n  params = utils.merge(defaults, params);\n\n  var url = '/direct_messages/new.json';\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.updateDirectMessage\n  = Twitter.prototype.sendDirectMessage\n  = Twitter.prototype.newDirectMessage;\n\nTwitter.prototype.destroyDirectMessage = function(id, callback) {\n  var url = '/direct_messages/destroy/' + escape(id) + '.json?_method=DELETE';\n  this.post(url, null, callback);\n  return this;\n}\nTwitter.prototype.deleteDirectMessage\n  = Twitter.prototype.destroyDirectMessage;\n\n// Friendship resources\n\nTwitter.prototype.createFriendship = function(id, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var defaults = {\n    include_entities: 1\n  };\n  if (typeof id === 'string')\n    defaults.screen_name = id;\n  else\n    defaults.user_id = id;\n  params = utils.merge(defaults, params);\n\n  var url = '/friendships/create.json';\n  this.post(url, params, null, callback);\n  return this;\n}\n\nTwitter.prototype.destroyFriendship = function(id, callback) {\n  if (typeof id === 'function') {\n    callback = id;\n    id = null;\n  }\n\n  var params = {\n    include_entities: 1\n  };\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else\n    params.user_id = id;\n\n  var url = '/friendships/destroy.json?_method=DELETE';\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.deleteFriendship\n  = Twitter.prototype.destroyFriendship;\n\n// Only exposing friendships/show instead of friendships/exist\n\nTwitter.prototype.showFriendship = function(source, target, callback) {\n  var params = {};\n\n  if (typeof source === 'string')\n    params.source_screen_name = source;\n  else\n    params.source_id = source;\n\n  if (typeof target === 'string')\n    params.target_screen_name = target;\n  else\n    params.target_id = target;\n\n  var url = '/friendships/show.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.incomingFriendship = function(callback) {\n  var url = '/friendships/incoming.json';\n  this._getUsingCursor(url, {key:'ids'}, callback);\n  return this;\n}\nTwitter.prototype.incomingFriendships\n  = Twitter.prototype.incomingFriendship;\n\nTwitter.prototype.outgoingFriendship = function(callback) {\n  var url = '/friendships/outgoing.json';\n  this._getUsingCursor(url, {key:'ids'}, callback);\n  return this;\n}\nTwitter.prototype.outgoingFriendships\n  = Twitter.prototype.outgoingFriendship;\n\nTwitter.prototype.lookupFriendship = function(id, callback) {\n  var url = '/friendships/lookup.json',\n      params = {}, ids = [], names = [];\n  \n  if (typeof id === 'string') {\n    id = id.replace(/^\\s+|\\s+$/g, '');\n    id = id.split(',');\n  }\n  \n  id = [].concat(id);\n  \n  id.forEach(function(item) {\n    if (parseInt(item, 10)) {\n      ids.push(item);\n    } else {\n      names.push(item);\n    }\n  });\n  \n  params.user_id = ids.toString();\n  params.screen_name = names.toString();\n  \n  this.get(url, params, callback);\n  return this;\n};\n\n// Friends and Followers resources\n\nTwitter.prototype.getFriendsIds = function(id, callback) {\n  if (typeof id === 'function') {\n    callback = id;\n    id = null;\n  }\n\n  var params = { key: 'ids' };\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else if (typeof id === 'number')\n    params.user_id = id;\n\n  var url = '/friends/ids.json';\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.getFollowersIds = function(id, callback) {\n  if (typeof id === 'function') {\n    callback = id;\n    id = null;\n  }\n\n  var params = { key: 'ids' };\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else if (typeof id === 'number')\n    params.user_id = id;\n\n  var url = '/followers/ids.json';\n  this._getUsingCursor(url, params, callback);\n  return this;\n}\n\n// Account resources\n\nTwitter.prototype.verifyCredentials = function(callback) {\n  var url = '/account/verify_credentials.json';\n  this.get(url, null, callback);\n  return this;\n}\n\nTwitter.prototype.rateLimitStatus = function(callback) {\n  var url = '/account/rate_limit_status.json';\n  this.get(url, null, callback);\n  return this;\n}\n\nTwitter.prototype.updateProfile = function(params, callback) {\n  // params: name, url, location, description\n  var defaults = {\n    include_entities: 1\n  };\n  params = utils.merge(defaults, params);\n\n  var url = '/account/update_profile.json';\n  this.post(url, params, null, callback);\n  return this;\n}\n\nTwitter.prototype.updateProfileImg = function (params, callback) {\n  // params: name, url, location, description\n  var defaults = {\n    include_entities: 1\n  };\n  params = utils.merge(defaults, params);\n\n  var url = '/account/update_profile_image.json';\n  this.post(url, params, null, callback);\n  return this;\n  \n}\n\n// FIXME: Account resources section not complete\n\n// Favorites resources\n\nTwitter.prototype.getFavorites = function(params, callback) {\n  var url = '/favorites.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.createFavorite = function(id, params, callback) {\n  var url = '/favorites/create/' + escape(id) + '.json';\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.favoriteStatus\n  = Twitter.prototype.createFavorite;\n\nTwitter.prototype.destroyFavorite = function(id, params, callback) {\n  var url = '/favorites/destroy/' + escape(id) + '.json';\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.deleteFavorite\n  = Twitter.prototype.destroyFavorite;\n\n// Notification resources\n\n// Block resources\n\nTwitter.prototype.createBlock = function(id, callback) {\n  var url = '/blocks/create.json';\n\n  var params = {};\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else\n    params.user_id = id;\n\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.blockUser\n  = Twitter.prototype.createBlock;\n\nTwitter.prototype.destroyBlock = function(id, callback) {\n  var url = '/blocks/destroy.json';\n\n  var params = {};\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else\n    params.user_id = id;\n\n  this.post(url, params, null, callback);\n  return this;\n}\nTwitter.prototype.unblockUser\n  = Twitter.prototype.destroyBlock;\n\nTwitter.prototype.blockExists = function(id, callback) {\n  var url = '/blocks/exists.json';\n\n  var params = {};\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else\n    params.user_id = id;\n\n  this.get(url, params, callback);\n  return this;\n}\nTwitter.prototype.isBlocked\n  = Twitter.prototype.blockExists;\n\n// FIXME: blocking section not complete (blocks/blocking + blocks/blocking/ids)\n\n// Spam Reporting resources\n\nTwitter.prototype.reportSpam = function(id, callback) {\n  var url = '/report_spam.json';\n\n  var params = {};\n  if (typeof id === 'string')\n    params.screen_name = id;\n  else\n    params.user_id = id;\n\n  this.post(url, params, null, callback);\n  return this;\n}\n\n// Saved Searches resources\n\nTwitter.prototype.savedSearches = function(callback) {\n  var url = '/saved_searches.json';\n  this.get(url, null, callback);\n  return this;\n}\n\nTwitter.prototype.showSavedSearch = function(id, callback) {\n  var url = '/saved_searches/' + escape(id) + '.json';\n  this.get(url, null, callback);\n  return this;\n}\n\nTwitter.prototype.createSavedSearch = function(query, callback) {\n  var url = '/saved_searches/create.json';\n  this.post(url, {query: query}, null, callback);\n  return this;\n}\nTwitter.prototype.newSavedSearch =\n  Twitter.prototype.createSavedSearch;\n\nTwitter.prototype.destroySavedSearch = function(id, callback) {\n  var url = '/saved_searches/destroy/' + escape(id) + '.json?_method=DELETE';\n  this.post(url, null, null, callback);\n  return this;\n}\nTwitter.prototype.deleteSavedSearch =\n  Twitter.prototype.destroySavedSearch;\n\n// OAuth resources\n\n// Geo resources\n\nTwitter.prototype.geoSearch = function(params, callback) {\n  var url = '/geo/search.json';\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.geoSimilarPlaces = function(lat, lng, name, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  } else if (typeof params !== 'object') {\n    params = {};\n  }\n\n  if (typeof lat !== 'number' || typeof lng !== 'number' || !name) {\n    callback(new Error('FAIL: You must specify latitude, longitude (as numbers) and name.'));\n  }\n\n  var url = '/geo/similar_places.json';\n  params.lat = lat;\n  params.long = lng;\n  params.name = name;\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.geoReverseGeocode = function(lat, lng, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  } else if (typeof params !== 'object') {\n    params = {};\n  }\n\n  if (typeof lat !== 'number' || typeof lng !== 'number') {\n    callback(new Error('FAIL: You must specify latitude and longitude as numbers.'));\n  }\n\n  var url = '/geo/reverse_geocode.json';\n  params.lat = lat;\n  params.long = lng;\n  this.get(url, params, callback);\n  return this;\n}\n\nTwitter.prototype.geoGetPlace = function(place_id, callback) {\n  var url = '/geo/id/' + escape(place_id) + '.json';\n  this.get(url, callback);\n  return this;\n}\n\n// Legal resources\n\n// Help resources\n\n// Streamed Tweets resources\n\n// Search resources\n\n// #newtwitter\nTwitter.prototype.getRelatedResults = function(id, params, callback) {\n\tvar url = '/related_results/show/' + escape(id) + '.json';\n\tthis.get(url, params, callback);\n\treturn this;\n}\n\n/*\n * INTERNAL UTILITY FUNCTIONS\n */\n\nTwitter.prototype._getUsingCursor = function(url, params, callback) {\n  var self = this,\n    params = params || {},\n    key = params.key || null,\n    result = [];\n\n  // if we don't have a key to fetch, we're screwed\n  if (!key)\n    callback(new Error('FAIL: Results key must be provided to _getUsingCursor().'));\n  delete params.key;\n\n  // kick off the first request, using cursor -1\n  params = utils.merge(params, {cursor:-1});\n  this.get(url, params, fetch);\n\n  function fetch(err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    // FIXME: what if data[key] is not a list?\n    if (data[key]) result = result.concat(data[key]);\n\n    if (data.next_cursor_str === '0') {\n      callback(null, result);\n    } else {\n      params.cursor = data.next_cursor_str;\n      self.get(url, params, fetch);\n    }\n  }\n\n  return this;\n}\n","/home/travis/build/npmtest/node-npmtest-ntwitter/node_modules/ntwitter/lib/parser.js":"// glorious streaming json parser, built specifically for the twitter streaming api\n// assumptions:\n//   1) ninjas are mammals\n//   2) tweets come in chunks of text, surrounded by {}'s, separated by line breaks\n//   3) only one tweet per chunk\n//\n//   p = new parser.instance()\n//   p.addListener('object', function...)\n//   p.receive(data)\n//   p.receive(data)\n//   ...\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Parser = module.exports = function Parser() {\n  // Make sure we call our parents constructor\n  EventEmitter.call(this);\n  this.buffer = '';\n  this.lastTime = null;\n  return this;\n};\n\n// The parser emits events!\nParser.prototype = Object.create(EventEmitter.prototype);\n\nParser.END        = '\\r\\n';\nParser.END_LENGTH = 2;\n\nParser.prototype.receive = function receive(buffer) {\n  this.lastTime = new Date().getTime();\n  this.buffer += buffer.toString('utf8');\n  var index, json;\n\n  // We have END?\n  while ((index = this.buffer.indexOf(Parser.END)) > -1) {\n    json = this.buffer.slice(0, index);\n    this.buffer = this.buffer.slice(index + Parser.END_LENGTH);\n    if (json.length > 0) {\n      try {\n        json = JSON.parse(json);\n      } catch (error) {\n        this.emit('error', new Error('Invalid JSON - ', error.message));\n      }\n      this.emit('_data', json);\n    }\n  }\n};\n\n\nParser.prototype.checkHeartbeat = function(){\n  var self = this;\n  var currentTime = new Date().getTime();\n\n  if (self.lastTime !== null && self.lastTime < (currentTime - 30000)){\n    self.emit(\"missedHeartbeat\");\n  }\n\n  setTimeout(function(){ self.checkHeartbeat(); }, 30000  );\n}","/home/travis/build/npmtest/node-npmtest-ntwitter/node_modules/ntwitter/lib/utils.js":"\n/*\n * Merge objects into the first one\n */ \n\nexports.merge = function(defaults) {\n\tfor(var i = 1; i < arguments.length; i++){\n\t\tfor(var opt in arguments[i]){\n\t\t\tdefaults[opt] = arguments[i][opt];\n}\n\t}\n\treturn defaults;\n};\n","/home/travis/build/npmtest/node-npmtest-ntwitter/node_modules/ntwitter/lib/keys.js":"module.exports = {\n\turls : {\n    request_token_url: 'https://api.twitter.com/oauth/request_token',\n    access_token_url: 'https://api.twitter.com/oauth/access_token',\n    authenticate_url: 'https://api.twitter.com/oauth/authenticate',\n    authorize_url: 'https://api.twitter.com/oauth/authorize',\n    rest_base: 'https://api.twitter.com/1.1',\n    search_base: 'http://search.twitter.com',\n          stream_base: 'https://stream.twitter.com/1.1',\n    user_stream_base: 'https://userstream.twitter.com/1.1',\n    site_stream_base: 'https://sitestream.twitter.com/1.1'\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-ntwitter/node_modules/ntwitter/index.js":"module.exports = require('./lib/twitter');\n"}